name: Build Image for General Commons service 
permissions: 
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Build from Github Actions
        type: environment
        default: build
#      code_branch:
#        description: Branch to build validation
#        required: false
      build:
        description: build docker images
        required: true
        type: boolean
        default: true
      trivy_scan_be:
        description: "Run Trivy Scan for BE"
        required: true
        type: boolean
        default: true
      trivy_scan_fe:
        description: "Run Trivy Scan for FE"
        required: true
        type: boolean
        default: true
      trivy_scan_interoperation:
        description: "Run Trivy Scan for interoperation"
        required: true
        type: boolean
        default: true
      deploy:
        type: boolean
        description: "Trigger deploy after build"
        required: true
        default: false
      memgraph_image:
run-name: "Build Docker Images and Deploy General Commons"

jobs:

  build:
    name: Build Image Job 
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ECR_BE: "crdc-gen-backend"
      ECR_FE: "crdc-gen-frontend"
      ECR_INTEROPERATION: "crdc-gen-interoperation"
      REGION: "us-east-1"
#      CODE_BRANCH: "${{ github.event.inputs.code_branch }}"
      AWS_BUILD_ROLE_TO_ASSUME: ${{ secrets.AWS_BUILD_ROLE_TO_ASSUME }}
      AWS_ECR_ACCOUNT_ID: ${{ secrets.AWS_ECR_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          #ref: ${{ env.CODE_BRANCH }}
          ref: ${{ github.ref_name }}
          submodules: true

      - name: extract branch name and set tag image
        id: extract_branch
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH_NAME" >> "$GITHUB_ENV"
          echo "Current branch is: $BRANCH_NAME"
          git fetch --tags --force --quiet
          #tag=$(git tag -l $BRANCH_NAME* | tail -1)
          tag=$(git tag -l $BRANCH_NAME* | sort -V | tail -1)
          if  [ ! -z "$tag" ];
          then
            # Increment the build number if a tag is found
            build_num=$(echo "${tag##*.}")
            build_num=$((build_num+1))
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          else
            # If no tag is found create a new tag name
            build_num=1
            echo "IMAGE_TAG=$BRANCH_NAME.$build_num" >> $GITHUB_ENV
          fi

      - name: Build BE Docker Image
        id: build-be-image
        #if: github.event.inputs.build_be == 'true'
        env:
          ECR_BE: "crdc-gen-backend"
          REGION: "us-east-1"
          AWS_BUILD_ROLE_TO_ASSUME: ${{ secrets.AWS_BUILD_ROLE_TO_ASSUME }}
          AWS_ECR_ACCOUNT_ID: ${{ secrets.AWS_ECR_ACCOUNT_ID }}
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          BE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_BE }}:${{ env.IMAGE_TAG }}
        run: |
          docker build --no-cache -t $BE_IMAGE_NAME -f backend/Dockerfile .

      - name: Run Trivy test scan for BE Docker Image
        id: trivy-scan-be
        if: github.event.inputs.trivy_scan_be == 'true'
        env:
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          BE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_BE }}:${{ env.IMAGE_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.BE_IMAGE_NAME }}'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'

      - name: Build FE Docker Image
        id: build-fe-image
        #if: github.event.inputs.build_fe == 'true'
        env:
          ECR_FE: "crdc-gen-frontend"
          REGION: "us-east-1"
          AWS_BUILD_ROLE_TO_ASSUME: ${{ secrets.AWS_BUILD_ROLE_TO_ASSUME }}
          AWS_ECR_ACCOUNT_ID: ${{ secrets.AWS_ECR_ACCOUNT_ID }}
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          FE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_FE }}:${{ env.IMAGE_TAG }}
        run: |
          docker build --no-cache -t $FE_IMAGE_NAME -f frontend/Dockerfile .

      - name: Run Trivy test scan for FE Docker Image
        id: trivy-scan-fe
        if: github.event.inputs.trivy_scan_fe == 'true'
        env:
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          FE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_FE }}:${{ env.IMAGE_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.FE_IMAGE_NAME }}'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'

      - name: Build Interoperation Docker Image
        id: build-interop-image
        #if: github.event.inputs.build_interoperation == 'true'
        env:
          ECR_INTEROPERATION: "crdc-gen-interoperation"
          REGION: "us-east-1"
          AWS_BUILD_ROLE_TO_ASSUME: ${{ secrets.AWS_BUILD_ROLE_TO_ASSUME }}
          AWS_ECR_ACCOUNT_ID: ${{ secrets.AWS_ECR_ACCOUNT_ID }}
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          INTEROP_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_INTEROPERATION }}:${{ env.IMAGE_TAG }}
        run: |
          docker build --no-cache -t $INTEROP_IMAGE_NAME -f interoperation/Dockerfile .

      - name: Run Trivy test scan for INTEROP Docker Image
        id: trivy-scan-interop
        if: github.event.inputs.trivy_scan_interoperation == 'true'
        env:
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          INTEROP_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_INTEROPERATION }}:${{ env.IMAGE_TAG }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.INTEROP_IMAGE_NAME }}'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'
      
      - name: Create git tag for image
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag ${{ env.IMAGE_TAG }}
          git push origin ${{ env.IMAGE_TAG }}

      - name: Configure AWS Role to assume using OIDC authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_BUILD_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        id: login-ecr
        env:
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        run:  |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY_URL

      - name: Push BE docker Image
        if: success()
        env:
          ECR_BE: "crdc-gen-backend"
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          BE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_BE }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing: $BE_IMAGE_NAME"
          docker push $BE_IMAGE_NAME

      - name: Push FE docker Image
        if: success()
        env:
          ECR_FE: "crdc-gen-frontend"
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          FE_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_FE }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing: $FE_IMAGE_NAME"
          docker push $FE_IMAGE_NAME

      - name: Push INTEROPERATION docker Image
        if: success()
        env:
          ECR_INTEROPERATION: "crdc-gen-interoperation"
          REGISTRY_URL: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          INTEROP_IMAGE_NAME: ${{ secrets.AWS_ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECR_INTEROPERATION }}:${{ env.IMAGE_TAG }}
        run: |
          echo "Pushing: $INTEROP_IMAGE_NAME"
          docker push $INTEROP_IMAGE_NAME

      - name: Deploy to dev
        uses: actions/github-script@v7
        if: ${{ inputs.deploy }}
        with:
          github-token: ${{ secrets.REPO_PAT }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
                owner: 'CBIIT',
                repo: 'general-deployments',
                workflow_id: 'manual-deploy.yml',
                ref: 'main',
                inputs: {
                  environment: '${{ inputs.environment }}',
                  frontend_image: '${{ env.IMAGE_TAG }}',
                  backend_image: '${{ env.IMAGE_TAG }}',
                  interoperation_image: '${{ env.IMAGE_TAG }}',
                  memgraph_image: '${{ inputs.memgraph_image }}',
                  cdk_command: 'deploy'
                }
            })

      - name: Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08     # v1.6.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: always()
